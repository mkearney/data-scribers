<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yonicdnetlifycom on rscribers</title>
    <link>/tags/yonicdnetlifycom/</link>
    <description>Recent content in Yonicdnetlifycom on rscribers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Jan 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/yonicdnetlifycom/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RStudio Addin Manager</title>
      <link>/post/rstudio-addin-manager/</link>
      <pubDate>Mon, 15 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/rstudio-addin-manager/</guid>
      <description>rsam provides a command line and user interface to manage RStudio addins. You can show or hide the addins in the RStudio IDE dropdown menu and set keyboard shortcuts for them. Installation Since rsam manages the RStudio addins it must write to disk. For this reason the package cannot be hosted on&amp;hellip;</description>
    </item>
    
    <item>
      <title>Extending slackr</title>
      <link>/post/extending-slackr/</link>
      <pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/extending-slackr/</guid>
      <description>The slackr package, by Bob Rudis , contains functions that make it possible to interact with the Slack messaging platform. The great part of Slack is that it has mobile devices application&amp;hellip;</description>
    </item>
    
    <item>
      <title>Combining Github Traffic Plots Across Repositories</title>
      <link>/post/combining-github-traffic-plots/</link>
      <pubDate>Mon, 02 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/combining-github-traffic-plots/</guid>
      <description>This post will show how to use the RSelenium package to scrape your own github account to retrieve all that fun traffic data of clones and visits and create a single traffic plot for your account. For the single file you can find it in this gist file&amp;hellip;.</description>
    </item>
    
    <item>
      <title>Regular Expression Searching within Shiny Selectize Objects</title>
      <link>/post/regular-expression-searching-w/</link>
      <pubDate>Tue, 26 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/regular-expression-searching-w/</guid>
      <description>regexSelect is a small package that uses Shiny modules to solve a problem in Shiny selectize objects - regular expression (regex) searching. You can quickly filter the values in the selectize object, while being able to add that new regex query to the selectize list. This is great for long lists, since you can return multiple item simultaneously without needing to endlessly click items in a list!&amp;hellip;</description>
    </item>
    
    <item>
      <title>What is the appropriate population scaling of the Affordable Care Act Funding?</title>
      <link>/post/what-is-the-appropriate-popula/</link>
      <pubDate>Tue, 26 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/what-is-the-appropriate-popula/</guid>
      <description>I have been trying to decipher for myself, what is in the current (well, yesterday&amp;rsquo;s) Graham-Cassidy health care bill. I saw this image on many news outlets a few days ago and my inner hate for pie charts bubbled up. This is a zoom in on the pie chart &amp;hellip; From what I can gather, these figures are attempting to say that there are specific states that are getting relatively more of the federal health care funds under the Afordable Care Act (ACA) than their relative state&amp;hellip;</description>
    </item>
    
    <item>
      <title>Automating roxygen2 package documentation</title>
      <link>/post/automating-roxygen2-package-do/</link>
      <pubDate>Mon, 18 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/automating-roxygen2-package-do/</guid>
      <description>Thinking of creating a new package? Dread the task of function documentation? Afraid to run devtools::check(build_args = &amp;lsquo;&amp;ndash;as-cran&amp;rsquo;) and get bombarded by Errors, Warnings, and Notes (oh my!) ? Wait&amp;hellip;. breathe! After feeling all that anxiety and following all of Hadley&amp;rsquo;s directions online, I felt I was doing a lot of manual labour, and that a package should be doing all lot of this for&amp;hellip;</description>
    </item>
    
    <item>
      <title>slickR</title>
      <link>/post/slickr/</link>
      <pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/slickr/</guid>
      <description>We are happy to bring the slick JavaScript library to R. It is self described as &amp;ldquo;the last carousel you&amp;rsquo;ll ever need&amp;rdquo;. This carousel is based on putting the elements of the carousel in a div HTML tag. This makes the carousel very versatile in what can be placed&amp;hellip;</description>
    </item>
    
    <item>
      <title>ggedit 0.2.0</title>
      <link>/post/ggedit-020/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/ggedit-020/</guid>
      <description>We are pleased to announce the release of the ggedit package on CRAN . To install the package you can call the standard R&amp;hellip;</description>
    </item>
    
    <item>
      <title>ggedit 0.1.1</title>
      <link>/post/ggedit-011/</link>
      <pubDate>Wed, 22 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/ggedit-011/</guid>
      <description>ggedit is a package that lets users interactively edit ggplot layer and theme aesthetics. In a previous post we showed you how to use it in a collaborative workflow using standard R scripts. More importantly, we highlighted that ggedit outputs to the user, after editing, updated: gg plots, layers, scales and themes as both self-contained objects and script that you can paste directly in your code&amp;hellip;.</description>
    </item>
    
  </channel>
</rss>